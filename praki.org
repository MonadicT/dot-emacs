
* How to use this file
=git clone= this repo. Create =~/.emacs.d/init.el= with the following and load it.
#+BEGIN_SRC exmaple :eval no
(require 'org)
(org-babel-load-file "~/dot-emacs/praki.org")
#+END_SRC

* Package repos
Packages in different repos are not all in sync. =helm= and =magit-mode=
installation wasn't straightforward.

#+BEGIN_SRC emacs-lisp :noweb-ref package-install
  (defun package-install-if-needed(pkg)
    (unless (package-installed-p pkg)
      (package-install pkg)))

  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("marmalade" . "https://marmalade-repo.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
#+END_SRC

* Essential tweaks
** Tweak emacs default UI to my liking.
No silly toolbar/menu. Make emacs less verbose. Parens matching and
display time.

#+BEGIN_SRC emacs-lisp :noweb-ref common-tweaks
(require 'tool-bar)
(require 'scroll-bar)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(toggle-scroll-bar -1)
(fset 'yes-or-no-p 'y-or-n-p)
(show-paren-mode 1)
(display-time-mode 1)
#+END_SRC

** Spell check setup

#+BEGIN_SRC emacs-lisp :noweb-ref common-tweaks
(setq ispell-program-name "/usr/local/bin/aspell")
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

** Whitespace setup
No tabs, no trailing white space.

#+BEGIN_SRC emacs-lisp :noweb-ref common-tweaks
(setq-default indent-tabs-mode nil)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq show-trailing-whitespace t)
(setq whitespace-style '(space-mark))
(setq backup-directory-alist '((".*" . "~/.Trash")))
(setq-default indent-tabs-mode nil)
#+END_SRC

** Backup directory
Reduce clutter in working directories.

#+BEGIN_SRC emacs-lisp :noweb-ref common-tweaks
(setq backup-directory-alist '((".*" . "~/.Trash")))
#+END_SRC

* Customize org-mode
=org-mode= does weird things with indents in source block edit buffers.

#+BEGIN_SRC emacs-lisp :noweb-ref common-tweaks
(setq org-edit-src-content-indentation 0)
(require 'org-tempo)
#+END_SRC
** Babel execute functions
Load files needed for =org-babel= source code evaluation.

#+BEGIN_SRC elisp :noweb-ref common-tweaks
(require 'ob-python)
(require 'ob-haskell)
(require 'ox-latex)
#+END_SRC

Evaluate these language blocks
#+BEGIN_SRC elisp :noweb-ref common-tweaks
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (latex . t)))

#+END_SRC
** Evaluation prompt
#+BEGIN_SRC elisp :noweb-ref common-tweaks
(defun my-org-confirm-babel-evaluate (lang body)
  (not (or (string= lang "python")
	   (string= lang "haskell")
	   (string= lang "elisp"))))

(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC

** Htmlize
Use =htmlize= for source code formatting.

#+BEGIN_SRC emacs-lisp :noweb-ref package-install
(setq       org-html-htmlize-output-type 'css)
(setq-default org-html-head "<link rel=\"stylesheet\" href=\"org-mode-style.css/>")
#+END_SRC

* Code folding
Indent-based code folding.

#+BEGIN_SRC elisp :noweb-ref package-setup
(package-install-if-needed 'origami)
(require 'origami)
(global-origami-mode t)

#+END_SRC

* Projectile, Helm, Perspective
Deep integration with =Helm=!

#+BEGIN_SRC elisp :noweb-ref package-setup
  (package-install-if-needed 'w3m)
  (package-install-if-needed 'helm)
  (package-install-if-needed 'helm-google)
  (package-install-if-needed 'helm-dash)
  (package-install-if-needed 'helm-flyspell)
  (package-install-if-needed 'projectile)
  (package-install-if-needed 'helm-projectile)
  (package-install-if-needed 'perspective)
#+END_SRC

Require helm packages (probably not necessary!)
#+BEGIN_SRC emacs-lisp :noweb-ref require
(require 'helm)
(require 'helm-config)
(require 'helm-projectile)
(require 'perspective)
#+END_SRC

Configure =helm= options.
#+BEGIN_SRC emacs-lisp :noweb-ref package-setup
(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t                       ;; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t                       ;; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t                       ;; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8                       ;; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(setq helm-M-x-fuzzy-match t)                                       ;; optional fuzzy matching for helm-M-x

(global-set-key (kbd "M-y") 'helm-show-kill-ring)

(define-key projectile-mode-map
  (kbd "C-c p") 'projectile-command-map)
(helm-mode 1)
(projectile-mode 1)
(persp-mode)

(global-set-key (kbd "C-x C-f") (lambda ()
  (interactive)
  (if (projectile-project-p)
    (helm-projectile-find-file)
    (helm-find-files-1 (helm-dwim-target-directory)))))

(with-eval-after-load 'helm-projectile
  (defvar helm-source-file-not-found
    (helm-build-dummy-source
        "Create file"
      :action (lambda (cand) (find-file cand))))


(add-to-list 'helm-projectile-sources-list helm-source-file-not-found t))

#+END_SRC

=helm= key bindings.
#+BEGIN_SRC emacs-lisp :noweb-ref key-bindings
;; Helm
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ;; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)   ;; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action)              ;; list actions using C-z
(global-set-key (kbd "C-x C-f") 'helm-find-files)                   ;; replace find-files
(global-set-key (kbd "C-x C-g") 'find-file)                         ;; original find-files
(global-set-key (kbd "C-x b") 'helm-mini)                           ;; replace switch-to-buffer
(global-set-key (kbd "M-x") 'helm-M-x)                              ;; helm replacement for M-x
#+END_SRC
* Magit
Essential mode for working with Git!

#+BEGIN_SRC emacs-lisp :noweb-ref package-install
;; Magit
(package-install-if-needed 'magit)
#+END_SRC

* Yasnippet
=yasnippet= along with =helm= is used for templates.

#+BEGIN_SRC emacs-lisp :noweb-ref package-install
;;(package-install-if-needed 'yasnippet)
;;(package-install-if-needed 'yasnippet-bundle)
;;(package-install-if-needed 'yasnippet-snippets)
;;(package-install-if-needed 'helm-c-yasnippet)
#+END_SRC

Require =yasnippet= package.
#+BEGIN_SRC emacs-lisp :noweb-ref require :results silent
;;(add-to-list 'load-path "~/.emacs.d/snippets/")
;;(require 'yasnippet)
;;(require 'helm-c-yasnippet)
#+END_SRC

Turn on =yas-mode= in all modes.
#+BEGIN_SRC emacs-lisp :noweb-ref package-setup
(setq helm-yas-space-match-any-greedy t)
;;(setq yas/root-directory "~/.emacs.d/snippets")
;;        (yas/load-directory yas/root-directory)
(customize-set-variable 'yas-alias-to-yas/prefix-p nil)
(yas-global-mode 1)
#+END_SRC

Key binding to invoke =helm-yas-snippet=.

#+BEGIN_SRC emacs-lisp :noweb-ref key-bindings
(global-set-key (kbd "C-c y") 'helm-yas-complete)
#+END_SRC

* Packages
Install packages I need.
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
  ;; gist
  (package-install-if-needed 'gist)

  ;; auto-complete
  (package-install-if-needed 'auto-complete)
#+END_SRC

* Modes
  Install modes that are not bundled with emacs.

  #+BEGIN_SRC emacs-lisp :noweb-ref package-install
    ;; Clojure
    (when (not (package-installed-p 'clj-mode))
      (package-install 'clj-mode))

    (when (not (package-installed-p 'cider))
      (package-install 'cider))

    ;; javascript
    (when (not (package-installed-p 'js2-mode))
      (package-install 'js2-mode))

    ;; graphviz
    (when (not (package-installed-p 'graphviz-dot-mode))
      (package-install 'graphviz-dot-mode))

    ;;  Rust
    (package-install-if-needed 'rust-mode)

    ;;  ReasonML
    (package-install-if-needed 'reason-mode)

  #+END_SRC

* Elixir mode
Elixir mode setup. Always run formatter before saving the buffer.

#+BEGIN_SRC elisp :noweb-ref package-setup
  (package-install-if-needed 'elixir-mode)
  (package-install-if-needed 'alchemist)

  (defun format-elixir-code ()
    (elixir-format))

  (add-hook 'elixir-mode-hook
            (lambda ()
              (add-hook 'before-save-hook
                        'format-elixir-code
                        nil
                        t)))

  (setq alchemist-iex-program-name "/usr/local/bin/iex") ;; default: iex
  (setq alchemist-execute-command "/usr/local/bin/elixir") ;; default: elixir
  (setq alchemist-compile-command "/usr/local/bin/elixirc") ;; default: elixirc
  (setq alchemist-test-status-modeline nil)
  (setq alchemist-key-command-prefix (kbd "C-c a")) ;; default: (kbd "C-c a")
  (setq alchemist-test-mode-highlight-tests nil) ;; default t
  (setq alchemist-test-ask-about-save nil)
  (setq alchemist-test-status-modeline nil)
  (setq alchemist-test-display-compilation-output t)
  (setq alchemist-test-truncate-lines nil) ;; default t
  (setq alchemist-hooks-test-on-save t)
  (setq alchemist-hooks-compile-on-save t)
#+END_SRC

* Elm mode
Elm mode setup. Run formatter before saving the buffer.

#+BEGIN_SRC elisp :noweb-ref package-setup

(defun my-elm-mode-hook ()
  (setq tab-width 4 indent-tabs-mode nil)
  (setq elm-format-on-save-mode t)
  (elm-format-on-save-mode))

(add-hook 'elm-mode-hook 'my-elm-mode-hook)
(setq elm-tags-on-save t)

#+END_SRC

** Hook to kill and restart elm compiler
Setup a less annoying way to kill the Elm compiler and restart
it. Relying on eshell and =./run.sh= convention for restarting the
process.

#+BEGIN_SRC elisp :noweb-ref package-setup

;; switch to eshell and restart elm-compiler
(defun switch-to-eshell()
  (interactive)
  (pop-to-buffer  "*eshell*")
  (eshell-kill-process)
  (eshell-return-to-prompt)
  (insert "./run.sh")
  (eshell-send-input))


(global-set-key (kbd "C-?") #'switch-to-eshell)

#+END_SRC

** Editing Elm template files
Edit =.et= files in =elm-mode=.

#+BEGIN_SRC elisp :noweb-ref package-setup

;; Set mode for .et files
(add-to-list 'auto-mode-alist '("\\.et\\'" . elm-mode))
#+END_SRC

** Find Elm code at point
Select elm code at point.

#+BEGIN_SRC elisp :noweb-ref package-setup
;; Highlight elm code at point
;; FIXME - buggy
(defun praki/elm-code-at-point()
  (interactive)
  (let* ((curr-point (point))
         (beg (progn
                ;; Find a line which starts with non-whitespace
                (while (and (> (point)  (point-min))
                            (not (string-match
                                  "^[[:alpha:]]"
                                  (buffer-substring
                                   (line-beginning-position)
                                   (line-end-position)))))
                  (previous-line))
                ;; Extend backwards until a line with whitespace
                (while (and (> (point)  (point-min))
                            (not (string-match
                             "^[[:space:]]*$"
                             (buffer-substring
                              (line-beginning-position)
                              (line-end-position)))))
                  (previous-line))
                (next-line)
                (point)))
         (end (progn
                ;; Find the next line starting with a '-' or alpha
                (goto-char curr-point)
                (while (and (< (point) (point-max))
                            (not (string-match "^[\-[:alpha:]]"
                                               (buffer-substring
                                                (line-beginning-position)
                                                (line-end-position)))))
                  (next-line))
                  (previous-line)
                ;; Skip trailing whitespace
                (while (and (< (point-min) (point))
                            (not (string-match
                             "^[[:space:]]*$"
                             (buffer-substring
                              (line-beginning-position) (line-end-position)))))
                  (previous-line))
                  (next-line)
                (point))))
    (set-mark beg)
    (goto-char end)))

(global-set-key (kbd "C-c C-.") 'praki/elm-code-at-point)

;; Run template processor when a .et file is saved
(defun praki/after-save-hook()
  (cond
   ((equal (file-name-extension (buffer-file-name)) "elm")
    ;; If there is a corresponding .et file, patch it with the changes here
    (let* ((file-name  (buffer-file-name))
           (et-file-name
            (concat
             (file-name-directory file-name)
             (file-name-base file-name)
             ".et")))
      (when (file-exists-p et-file-name)
        ;; TBD
        )))
   ((equal (file-name-extension (buffer-file-name)) "et")
    (progn
      ;; Process .et files to generate .elm file from it
      (run-template-processor "${" "}$"
                              (concat
                               (file-name-directory (buffer-file-name))
                               "/"
                               (file-name-base buffer-file-name)
                               ".elm"))))))
(add-hook 'after-save-hook 'praki/after-save-hook)

;; Format region as ELm source code
(defun praki/elm-format-region()
  (interactive)
  (when (region-active-p)
    (let* ((text (buffer-substring-no-properties (region-beginning) (region-end)))
           repl)
      (with-temp-buffer
        (insert text)
        (elm-format-buffer)
        (goto-line 4)
        (setq repl (buffer-substring (point) (point-max))))
      (delete-region (region-beginning) (region-end))
      (insert repl))))

(global-set-key (kbd "C-c C-b") 'praki/elm-format-region)

#+END_SRC

** Jail edit
This is a minor mode for editing embedded elisp templates in Elm
source files. Elisp code is delimited by "${" and "}$". The embedded
block can be edited in buffer in elisp mode and saved. This is similar
to org-mode source code.


#+BEGIN_SRC elisp :noweb-ref package-setup
;;

(defvar-local jail-edit-mark-beg nil)
(defvar-local jail-edit-mark-end nil)
(defvar-local jail-edit-overlay nil)
(defvar-local jail-edit-window-layout nil)

(defvar jail-edit-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "C-c C-c") #'jail-edit-exit)
    (define-key map (kbd "C-c '")   #'jail-edit-exit)
    (define-key map (kbd "C-c C-k") #'jail-edit-abort)
    (define-key map (kbd "C-x C-s") #'jail-edit-save)
    map))

(define-minor-mode jail-edit-mode
  "A minor mode used when editing an embedded elisp block."
  nil " jail-Edit"
  jail-edit-mode-map)

(defun jail-edit-exit ()
  "Save and exitn."
  (interactive)
  (let ((code (buffer-string))
        (edit-point (point))
        (beg jail-edit-mark-beg)
        (end jail-edit-mark-end))
    (jail-edit-save)
    (jail-edit-abandon-edit-buffer (marker-buffer beg))
    (goto-char (1- (+ beg edit-point)))
    (set-marker beg nil)
    (set-marker end nil)))


(defun jail-edit-abort ()
  (interactive)
  (jail-edit-abandon-edit-buffer (marker-buffer jail-edit-mark-beg)))

(defun jail-edit-save ()
  (interactive)
  (let ((buffer (current-buffer))
        (code (buffer-string))
        (mod (buffer-modified-p))
        (beg jail-edit-mark-beg)
        (end jail-edit-mark-end)
        (edit-point (point))
        (overlay jail-edit-overlay)
        (new-end nil))
    (with-current-buffer (marker-buffer beg)
      (goto-char beg)
      (when mod
        (undo-boundary)
        (delete-region beg end)
        (insert code)
        (save-buffer)
        (move-overlay overlay beg (copy-marker (+ (marker-position beg) (length code))))
        (setq new-end (copy-marker (+ (marker-position beg) (length code))))))
    (jail-edit-set-local 'jail-edit-mark-end new-end)))

(defun jail-edit-abandon-edit-buffer (dest-buffer)
  (interactive "P")
  (let ((buffer (current-buffer)))
    (switch-to-buffer-other-window dest-buffer)
    (jump-to-register jail-edit-window-layout)
    (with-current-buffer buffer
      (set-buffer-modified-p nil))
    (kill-buffer buffer)))

(defun jail-edit-src()
  "return embedded code block around point"
  (interactive)
  (let* ((beg-delim "^${")
         (end-delim "}$")
         (res (search-backward-regexp beg-delim))
         (beg (copy-marker (match-end 0)))
         (res (search-forward end-delim))
         (end (copy-marker (match-beginning 0)))
         (overlay (make-overlay beg end))
         (code (buffer-substring-no-properties beg end))
         (edit-buffer (generate-new-buffer
                       (jail-edit-buffer-name (buffer-name))))
         (block-indent "  "))
    (window-configuration-to-register jail-edit-window-layout)
    (overlay-put overlay 'edit-buffer edit-buffer)
    (overlay-put overlay 'face 'secondary-selection)
    (overlay-put overlay :read-only "Editing in other buffer.")
    (switch-to-buffer-other-window edit-buffer t)
    (funcall 'emacs-lisp-mode)
    (insert code)
    (jail-edit-mode)

    (jail-edit-set-local 'jail-edit-overlay overlay)
    (jail-edit-set-local 'jail-edit-mark-beg beg)
    (jail-edit-set-local 'jail-edit-mark-end end)
    (jail-edit-set-local 'jail-edit-block-indent block-indent)
    (add-hook 'kill-buffer-hook
              #'(lambda ()
                  (progn
                    (when jail-edit-overlay (delete-overlay jail-edit-overlay))
                    (jump-to-register jail-edit-window-layout))) nil 'local)))

(defsubst jail-edit-set-local (var value)
  (set (make-local-variable var) value))


(defun jail-edit-buffer-name (base-buffer-name)
  (concat "*Narrowed Edit " base-buffer-name "[ elisp ]*"))

;; (remove-overlays 1 (point-max))
(global-set-key (kbd "C-c e") 'jail-edit-src)
#+END_SRC

* Git
Set up magit mode for working with git
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
(package-install-if-needed 'magit)
#+END_SRC

* Go
These bits setup programming mode for golang
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
  (package-install-if-needed 'go-mode)
  (package-install-if-needed 'go-eldoc)
  (package-install-if-needed 'go-autocomplete)
#+END_SRC

Hooks for Go.

#+BEGIN_SRC emacs-lisp :noweb-ref hooks
  ;; install go-mode and go-eldoc package
  ;; enable eldoc for go
  (add-hook
   'go-mode-hook
   (lambda()
     ;; compile command and keybinding for go
     (setq compile-command "go build -v && go test -v && go vet")
     (define-key (current-local-map) "\C-c\C-c" 'compile)
     ;; enable eldoc
     (go-eldoc-setup)
     (setq gofmt-command "goimports")
     ;; Key binding to jum to defn
     (local-set-key (kbd "M-.") 'godef-jump)))

  (defun my-go-mode-hook ()
                                          ; Call Gofmt before saving
    (add-hook 'before-save-hook 'gofmt-before-save)
                                          ; Customize compile command to run go build
    (if (not (string-match "go" compile-command))
        (set (make-local-variable 'compile-command)
             "go build -v && go test -v && go vet"))
                                          ; Godef jump key binding
    (setq tab-width 2 indent-tabs-mode nil)
    (local-set-key (kbd "M-.") 'godef-jump)
    (local-set-key (kbd "M-*") 'pop-tag-mark))

  (add-hook 'go-mode-hook 'my-go-mode-hook)

  ;; setup autocompletion
  (require 'auto-complete-config)
  (require 'go-autocomplete)

#+END_SRC
* Idris
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
(package-install-if-needed 'idris-mode)
(package-install-if-needed 'helm-idris)

#+END_SRC
* Java mode
#+BEGIN_SRC emacs-lisp :noweb-ref package-setup
  (add-hook 'java-mode-hook
	    (lambda ()
	      (setq c-basic-offset 4)))
#+END_SRC
* Purescript
#+BEGIN_SRC
(require 'repl-toggle)
(require 'psci)
(add-to-list 'rtog/mode-repl-alist '(purescript-mode . psci))
(add-hook 'purescript-mode-hook 'inferior-psci-mode)
;;(setq load-path (append load-path "/Users/praki/.npm-packages/bin"))
#+END_SRC
* Reason
#+BEGIN_SRC elisp :noweb-ref package-setup
(package-install-if-needed 'utop)

(require 'reason-mode)
(require 'merlin)

;; Use the opam installed utop
(setq utop-command "opam config exec -- utop -emacs")

(defun shell-cmd (cmd)
  "Returns the stdout output of a shell command or nil if the command returned
   an error"
  (car (ignore-errors (apply 'process-lines (split-string cmd)))))

(let* ((refmt-bin (or (shell-cmd "refmt ----where")
                      (shell-cmd "which refmt")))
       (merlin-bin (or (shell-cmd "ocamlmerlin ----where")
                       (shell-cmd "which ocamlmerlin")))
       (merlin-base-dir (when merlin-bin
                          (replace-regexp-in-string "bin/ocamlmerlin$" "" merlin-bin))))
  ;; Add npm merlin.el to the emacs load path and tell emacs where to find ocamlmerlin
  (when merlin-bin
    (add-to-list 'load-path (concat merlin-base-dir "share/emacs/site-lisp/"))
    (setq merlin-command merlin-bin))

  (when refmt-bin
    (setq refmt-command refmt-bin)))

(add-hook 'reason-mode-hook (lambda ()
                              (add-hook 'before-save-hook 'refmt-before-save)
                              (merlin-mode)))
(autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
(add-hook 'reason-mode-hook 'utop-minor-mode)
(add-hook 'reason-mode-hook (lambda ()
(add-hook 'before-save-hook 'refmt-before-save)))
(setq merlin-ac-setup t)
#+END_SRC
* Typescript
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
  (package-install-if-needed 'typescript-mode)
#+END_SRC

Hooks for Typescript.

#+BEGIN_SRC emacs-lisp :noweb-ref hooks
(defun my-typescript-mode-hook ()
  (setq indent-tabs-mode nil)
  (let ((my-tab-width 2))
    (setq tab-width my-tab-width)
    (setq c-basic-indent my-tab-width)
    (setq c-basic-offset my-tab-width)
    (set (make-local-variable 'tab-stop-list)
         (number-sequence my-tab-width 200 my-tab-width))))
(add-hook 'typescript-mode-hook 'my-typescript-mode-hook)
#+END_SRC

* Parenthesis matching
#+BEGIN_SRC emacs-lisp :noweb-ref common-tweaks
(global-set-key "%" 'match-paren)

          (defun match-paren (arg)
            "Go to the matching paren if on a paren; otherwise insert %."
            (interactive "p")
            (cond ((looking-at "\\s(") (forward-list 1) (backward-char 1))
                  ((looking-at "\\s)") (forward-char 1) (backward-list 1))
                  (t (self-insert-command (or arg 1)))))

#+END_SRC
* Dedicating windows
#+BEGIN_SRC emacs-lisp :noweb-ref common-tweaks
(defun toggle-window-dedicated ()
  "Toggle whether the current active window is dedicated or not"
  (interactive)
  (message
   (if (let (window (get-buffer-window (current-buffer)))
	 (set-window-dedicated-p window
				 (not (window-dedicated-p window))))
       "Window '%s' is dedicated"
     "Window '%s' is normal")
   (current-buffer)))
#+END_SRC
* Blogs
  Setup =elfeed= for reading RSS.

  #+BEGIN_SRC emacs-lisp
    (package-install-if-needed 'elfeed)
(require 'elfeed)
    ;; List of my feed urls
    (setq my-feeds '(
                     "http://engineering.linkedin.com/taxonomy/term/1/feed"
                     "http://code.google.com/feeds/updates.xml"
                     "http://nerds.airbnb.com/feed/"
                     "http://engineeringblog.yelp.com/atom.xml"
                     "http://blog.docker.io/feed/"
                     "http://blog.docker.io/feed/"
                     "http://techblog.netflix.com/rss.xml"
                     "http://feeds.feedburner.com/AmazonWebServicesBlog"
                     "https://developers.facebook.com/blog/"
                     "http://news.ycombinator.com/rss"
                     "http://feeds.feedburner.com/TheDailyPuppy"
                     "http://feeds.wired.com/wired/index"
                     "http://rss.cnn.com/rss/cnn_topstories.rss"
                     "http://www.infoq.com/feed?token=lfDrJhbuQ3dOvzpD0piQU2W3q50LEvS2"
                     " http://engineering.twitter.com/feeds/posts/default?alt=rss"))

    ;; Add them to elfeed when necessary
    (mapcar
     (lambda (url)
       (when (not (cl-member url (elfeed-feed-list) :test 'string=))
         (elfeed-add-feed url)))
     my-feeds)

    ;; hotkey to open blog window
    (global-set-key (kbd "C-x w") 'elfeed)
  #+END_SRC

* Global key bindings

  My global key bindings.

  | Copy region  | [C-c C-k] |
  | Scroll up    | [M-p]     |
  | Scroll down  | [M-n]     |
  | Magit status | [C-c m]   |

  | Mode              | Key          | Description            |
  |-------------------+--------------+------------------------|
  | graphviz-dot-mode | =C-c c=      | Compile graph          |
  |                   | =C-c p=      | Preview                |
  |-------------------+--------------+------------------------|
  | org-mode          | =C-c C-e lo= | Export to pdf and open |
  |-------------------+--------------+------------------------|
  | helm-mode         | =C-n=        | Select next in list    |
  |                   | =C-p=        | Select prev in list    |
  |                   | =M-n=        | Move to next section   |
  |                   | =M-p=        | Move to prev section   |
  |-------------------+--------------+------------------------|
  | (global)          | =C-x w=      | Blog window            |
  |                   | =C-c m=      | Magit status           |
  |                   | =C-M ==      | Indent buffer          |
  |                   | =C-c C-k=    | Kill region            |
  |                   | =M-p=        | Scroll up              |
  |                   | =M-n=        | Scroll down            |
  |                   | =C-C h=      | Helm prefix            |

#+begin_src emacs-lisp :noweb-ref key-bindings
(global-set-key "\C-c\C-k" 'copy-region-as-kill)
(global-set-key "\C-ck" 'copy-region-as-kill)
(global-set-key "\M-n"  (lambda () (interactive) (scroll-up 1)))
(global-set-key "\M-p"  (lambda () (interactive) (scroll-down 1)))
(global-set-key "\C-cm"  'magit-status)

(global-set-key (kbd "C-x C-f") #'helm-find-files)

;; Origmai key bindings
(global-set-key (kbd "C-c f a") #'origami-close-all-nodes)
(global-set-key (kbd "C-c f o") #'origami-open-all-nodes)
(global-set-key (kbd "C-c f 1") #'origami-open-node)
(global-set-key (kbd "C-c f 0") #'origami-close-node)
(global-set-key (kbd "C-c f t") #'origami-toggle-node)

#+end_src

* Theme
Here is the code to install to =zenburn= theme and load it. Default
cursor and mouse colors are adjusted to my personal liking.
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
(package-install-if-needed 'zenburn-theme)
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb-ref package-setup
;; zenburn theme
(message "loading theme")
(load-theme 'zenburn t)
(set-cursor-color "green")
(set-mouse-color "green")
#+END_SRC

Make copy and paste from emacs and other programs. Under X11, the
following block makes this work. Highlighted text can be inserted with
=Shift-Insert= key.

#+BEGIN_SRC emacs-lisp :noweb-ref package-setup
  (when (eq window-system 'x)
    (setq x-select-enable-clipboard t)
    (setq interprogram-paste-function 'x-cut-buffer-or-selection-value))
#+END_SRC

* Popup help
This displays a popup window with some helpful text and bound to a
global key =ñC-x p=.

#+BEGIN_SRC emacs-lisp :noweb-ref util-fn

(defun quick-help()
    (interactive)
    (save-excursion
      (goto-line (point-min))
      (popup-tip
       "
  Rectangle                Position                   File
  =========                ========                   ====
  Clear     - C-x r c      Save     - C-x r <SPC> /r/ Store - (
  Delete    - C-x r d      Jump     - C-x r j /r/
  Kill      - C-x r k                                 Macro
  Insert    - C-x r o      Text                       =====
  Register  - C-x r r /r/  ====                       Save  - C-x C-k x /r/
  Replace   - C-x r t      Copy     - C-x r s /r/
  Yank      - C-x r y      Insert   - C-x r i /r/     Bookmarks
  Number    - C-x r N      Append   - C-x r + /r/     =========
  Copy/kill - C-x r M-w                               Set   - C-x r m
                                                      Jump  - C-x r b
                                                      List  - C-x r l
  Projectile               Persp
  ==========               =====
  Find     - C-c p f       Crt/sel  - C-x x s
  Switch   - C-c p p       Buf rm   - C-x x k
  Grep     - C-c p g       Buf add  - C-x x a
                           Buf set  - C-x x A
  "
       :point (point)
       :around t
       :height 45
       :scroll-bar t
       :margin t)))

  (global-set-key (kbd "C-c p ?") #'quick-help)
#+END_SRC
* Background for auto generated code
File hook to indicate that the buffer is visiting an auto generated
file. Works by examining the first 10 lines of a file for a regex.
#+BEGIN_SRC elisp :noweb-ref util-fns
(defun praki/find-file-hook ()
  (when (equal (file-name-extension (buffer-file-name)) "elm")
    (save-excursion
      (let ((l 1))
        (while (and (< l 10) (< (point) (point-max)))
          (goto-line l)
          (if (string-match "-- Auto Generated Module"
                            (message (buffer-substring-no-properties
                                      (line-beginning-position) (line-end-position))))
              (let ((background "black"))
                (read-only-mode 1)
                (let ((o (make-overlay (point-min) (point-max)
			               (current-buffer) nil t)))
                  (overlay-put o 'face `(:background ,background))
                  (overlay-put o 'praki t))))
          (setq l (+ l 1)))))))

(add-hook 'find-file-hook 'praki/find-file-hook)
#+END_SRC
* Load-path extension
#+BEGIN_SRC emacs-lisp :noweb-ref extend-load-path
(add-to-list 'load-path "~/.emacs.d/lisp")

#+END_SRC

* Snippets
Create directories in =~/.emacs.d/snippets=.
#+begin_src elisp :noweb-ref util-fn :results silent
(make-directory "~/.emacs.d/snippets/org-mode" t)
(make-directory "~/.emacs.d/snippets/latex-mode" t)
#+end_src

** Tikz flowchart
#+BEGIN_SRC python :exports code :tangle ~/.emacs.d/snippets/latex-mode/flowchart.yasnippet :results silent
# -*- mode: snippet -*-
# name: flowchart
# key:
# binding: "keybinding"
# expand-env: ((some-var some-value))
# --
\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{tikz}
\usetikzlibrary{shapes.geometric, arrows}

\tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm,text centered, draw=black, fill=red!30]
\tikzstyle{io} = [trapezium, trapezium left angle=70, trapezium right angle=110, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=blue!30]
\tikzstyle{process} = [rectangle, minimum width=3cm, minimum height=1cm, text centered, text width=3cm, draw=black, fill=orange!30]
\tikzstyle{decision} = [diamond, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=green!30]
\tikzstyle{arrow} = [thick,->,>=stealth]

\begin{document}

\begin{tikzpicture}[node distance=2cm]

\node (start) [startstop] {Start};
\node (in1) [io, below of=start] {Input};
\node (pro1) [process, below of=in1] {Process 1};
\node (dec1) [decision, below of=pro1, yshift=-0.5cm] {Decision 1};
\node (pro2a) [process, below of=dec1, yshift=-0.5cm] {Process 2a text text text text text text text text text text};
\node (pro2b) [process, right of=dec1, xshift=2cm] {Process 2b};
\node (out1) [io, below of=pro2a] {Output};
\node (stop) [startstop, below of=out1] {Stop};

\draw [arrow] (start) -- (in1);
\draw [arrow] (in1) -- (pro1);
\draw [arrow] (pro1) -- (dec1);
\draw [arrow] (dec1) -- node[anchor=east] {yes} (pro2a);
\draw [arrow] (dec1) -- node[anchor=south] {no} (pro2b);
\draw [arrow] (pro2b) |- (pro1);
\draw [arrow] (pro2a) -- (out1);
\draw [arrow] (out1) -- (stop);


q\end{tikzpicture}

\end{document}
#+END_SRC

* Preload registers
#+BEGIN_SRC elisp :noweb-ref util-fn :eval no
(set-register ?a "#+BEGIN_SRC elisp :eval no :noweb-ref funcs\n\n\#+END_SRC")
(set-register ?b "#+BEGIN_SRC elisp :eval no :noweb yes :results none :exports code :tangle foo.bar\n\n\#+END_SRC")

(set-register ?c "-- Copyright © 2020, Praki Prakash, All rights reserved.")

(set-register ?h "-- Copyright © 2020, Praki Prakash, All rights reserved.

{-# LANGUAGE EmptyCase #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE InstanceSigs #-}
{-# LANGUAGE MultiParamTypeClasses #-}

{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE TupleSections #-}

{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveLift #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE StandaloneDeriving #-}

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE TypeOperators #-}

{-# LANGUAGE OverloadedStrings #-}

{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeApplications #-}

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}

module Foo() where\n")

(set-register ?o "#+TITLE: FIXME
#+OPTIONS:     num:nil toc:t")

(set-register ?n '(file . "~/projects/notes/notes.org"))
#+END_SRC
* Tangle .emacs
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs :noweb yes
<<extend-load-path>>
<<package-install>>
<<common-tweaks>>
<<require>>
<<key-bindings>>
<<hooks>>
<<package-setup>>
<<util-fn>>
#+END_SRC
* Custom preview modes
** Metapost
Compile metapost code, convert .eps to .png and open in buffer
#+BEGIN_SRC elisp
(add-hook 'metapost-mode-hook
          (lambda ()
            (add-hook 'after-save-hook 'metapost-preview nil)))

(defun metapost-preview()
  (interactive)
  (let* ((fname (buffer-file-name))
         (eps-name (concat (file-name-sans-extension fname) ".eps"))
         (png-name (concat (file-name-sans-extension fname) ".png"))
         (windows (window-list)))
    (when (equal (file-name-extension fname) "mp")
      (shell-command-to-string (concat "mpost " fname))
      (shell-command-to-string (format "convert %s png: | convert - %s" eps-name png-name))
      (progn
        (when (= (length windows) 1)
          (split-window-sensibly))
        (with-selected-window (selected-window)
          (switch-to-buffer-other-window (find-file-noselect png-name) t)
          (sleep-for 0 100)
          (revert-buffer t t))))))


#+END_SRC
* Javascript tricks
#+begin_src shell
(function(){document.body.innerHTML='<form method="POST" action="http://localhost:4000/login"><input name="user" value="admin"/><input name="password" value="foo"/><input type="submit"></form>';document.forms[0]})();
#+end_src
