* Emacs customization
Copy this to /.emacs.d/ directory and rename it to match the user
name. Emacs will automatically load it.
** Debug on error
#+begin_src emacs-lisp
(setq debug-on-error t)
#+end_src

** Turn off splash screen
#+begin_src emacs-lisp
(setq inhibit-startup-message t)        ; no splash screen
#+end_src

** Turn of menu and tool bar
#+begin_src emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
#+end_src

** Turn off auto-fill-mode
#+begin_src emacs-lisp
(auto-fill-mode -1)
#+end_src
** Mode line customization
Display column number.
#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src

** Save desktop state
#+begin_src emacs-lisp
(desktop-save-mode 1)
#+end_src
** Display dirs first in dired
#+begin_src emacs-lisp
(setq ls-lisp-dirs-first t)
#+end_src

** Replace tabs with spaces
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

** Copy region
#+begin_src emacs-lisp
(global-set-key "\C-c\C-k" 'copy-region-as-kill)
(global-set-key "\C-ck" 'copy-region-as-kill)
#+end_SEC

** Scroll up and down

#+begin_src emacs-lisp
(global-set-key "\M-n"  (lambda () (interactive) (scroll-up 1)))
(global-set-key "\M-p"  (lambda () (interactive) (scroll-down 1)))
#+end_src

** Trailing whitespace
Show trailing whitespace and delete it when buffer is saved.
#+begin_src emacs-lisp
(setq-default show-trailing-whitespace t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Set default font
Prefer DejaVu instead of Bitstream for its wider coverage.
#+begin_src emacs-lisp
(set-frame-font "DejaVu Sans Mono-11")
;;(set-frame-font "Bitstream Vera Sans Mono-11")
#+end_src

* Require cl
#+begin_src emacs-lisp
;;(require 'cl)
(setq debug-on-error t)
#+end_src
* Ido mode customizations
** Reset ido-use-filename-at-point
We don't want ido to open anything at cursor.
#+begin_src emacs-lisp
(setf ido-use-filename-at-point nil)
#+end_src

** Make ido use completion-ignored-extensions
Ignore these extensions in =ido-file-open=
#+BEGIN_SRC emacs-lisp
(add-to-list 'completion-ignored-extensions ".clj")
(add-to-list 'completion-ignored-extensions ".tex")
(add-to-list 'completion-ignored-extensions ".orig")
(add-to-list 'completion-ignored-extensions ".pdf")
#+END_SRC

** Set order of file extensions
List =.org= files first followed by others.
#+BEGIN_SRC emacs-lisp
  (setq ido-file-extensions-order '(".org" ".lc"))
#+END_SRC

* Elisp utility functions
** Find directory containing a specified file
#+begin_src emacs-lisp
(defun find-nearest-containing-dir(f)
  (let ((fn (buffer-file-name)))
    (let ((dir (file-name-directory fn)))
      (while (and (not (file-exists-p (concat dir "/" f)))
                  (not (equal dir (file-truename (concat dir "/..")))))
        (setf dir (file-truename (concat dir "/.."))))
      (if (file-exists-p (concat dir "/" f))
          dir))))
#+end_src

** sort-words
#+begin_src emacs-lisp
(defun sort-words(start end)
  (interactive "r")
  (let* ((str (buffer-substring-no-properties start end))
         (words (split-string str))
         (sorted-words (sort words #'string<))
         (sorted-str (mapconcat (lambda (a) a) sorted-words " ")))
    (delete-region start end)
    (insert sorted-str)))
#+end_src

** Indent entire buffer
Indents buffer contents without having to select it first.
#+begin_src emacs-lisp
  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

(global-set-key [?\C-\M-=] #'indent-buffer)
#+end_src


* Org mode
** org-mode tweaks for code blocks
We want fontification in org-mode. We also want to edit source blocks
in the current window.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-window-setup 'current-window)
#+end_src

** Define easy template extensions
Customize =org-structure-template-alist=

#+BEGIN_SRC emacs-lisp
  (add-to-list
   'org-structure-template-alist
   '("C" "#+name: \n#+begin_src clojure :noweb yes\n\n#+end_src"))
#+END_SRC

** Activate embedded dot
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t)))

#+end_src

** Turn off code evaluation confirmation for dot
#+begin_src emacs-lisp
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (string= lang "dot")))
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Define a function to show tangle output filename.

#+begin_src emacs-lisp
  (defun show-tangle-output-filename
    ()
    (interactive)
    (save-excursion
      (while (and (> (point) (point-min))
                  (not (looking-at "^:tangle: \\(.*$\\)")))
        (forward-line -1))
      (message "%s" (match-string 1))
      (match-string 1)))
  (add-hook
      'org-mode-hook
      '(lambda ()
         (define-key org-mode-map "\C-c\C-v/" 'show-tangle-output-filename)))

#+end_src
** Remove org-mode postamble from html-export

#+begin_src emacs-lisp
(setq org-export-html-postamble nil)
#+end_src

** Custom CSS for html export
Tell org-mode to skip inserting its default CSS and link to article.css

#+BEGIN_SRC emacs-lisp
(setq org-export-html-style-include-scripts nil
       org-export-html-style-include-default nil)
(setq org-export-html-style
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"~/projects/gwave-site/articles/article2.css\" />")
(setq org-image-actual-width nil)
#+END_SRC
** Workaround for tangle performance issue
#+BEGIN_SRC emacs-lisp
(setf org-babel-use-quick-and-dirty-noweb-expansion t)
#+END_SRC
