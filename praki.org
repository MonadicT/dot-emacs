* How to use this file
=git clone= this repo. Create =~/.emacs.d/init.el= with the following and load it.
#+BEGIN_SRC exmaple
(require 'org)
(org-babel-load-file "~/stuff/dot-emacs/praki.org")
#+END_SRC

This file can also be tangled with =C-c C-v t= generating a =~/.emacs= file.

* Installing emacs
The best way to install emacs is by compiling it yourself. The
following commands clone emacs repo and build it on my Ubuntu system.

#+BEGIN_SRC shell
git clone git://git.savannah.gnu.org/emacs.git
git checkout emacs-25.0.91
./autogen.sh
./configure
make
sudo make install
#+END_SRC

org-mode is pretty essential. Sadly, emacs and org-mode are not always
in sync. The best way to manage this is to build org-mode from
source. You must know the right version of org-mode that works with
emacs and proceed from there.

#+BEGIN_SRC shell
git clone git://orgmode.org/org-mode.git
make
sudo make install
#+END_SRC

* Package reps
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))

(package-initialize)
#+END_SRC

Here is a convenience function to install packages conditionally.
#+BEGIN_SRC emacs-lisp :noweb-ref package-install

  (defun package-install-if-needed (pkg)
    (when (not (package-installed-p pkg))
      (package-install pkg)))

#+END_SRC

* Emacs customization
Before we can customize, we need to know the environment emacs is
running on. =display-graphic-p= informs us if we are running in a
graphical environment. =window-system= is either =x= or =w32=
depending on the OS environment.

Tweak emacs behavior to suit my taste better. No menu and toolbar. No
tabs. No trailing whitespace.

#+begin_src emacs-lisp :noweb-ref common-tweaks
  (setq debug-on-error nil)
  (setq inhibit-startup-message t)    ;; no splash screen
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (fset 'yes-or-no-p 'y-or-n-p)       ;; replace yes-no with y-n
  (auto-fill-mode -1)                 ;; turn off auto-fill-mode
  (column-number-mode 1)              ;; display column number in mode line
  (desktop-save-mode 1)               ;; enable desktop save
  (setq ls-lisp-dirs-first t)         ;; display directories first in dir-mode
  (setq-default indent-tabs-mode nil) ;; indent with spaces
  (setq-default
   show-trailing-whitespace t)        ;; visual indication of trailing space
  (setq-default tab-width 4)          ;; tab width be 4 spaces
  (add-hook 'before-save-hook         ;; delete trailing space
            'delete-trailing-whitespace)
  (set-frame-font "DejaVu Sans Mono-11")
#+end_src

* Utility functions
** sort-words
#+begin_src emacs-lisp :noweb-ref util-fn
(defun sort-words(start end)
  (interactive "r")
  (let* ((str (buffer-substring-no-properties start end))
         (words (split-string str))
         (sorted-words (sort words #'string<))
         (sorted-str (mapconcat (lambda (a) a) sorted-words " ")))
    (delete-region start end)
    (insert sorted-str)))
#+end_src
** Indent entire buffer
   Indents buffer contents without having to select it first.
   #+begin_src emacs-lisp :noweb-ref util-fn
     (defun indent-buffer ()
       (interactive)
       (indent-region (point-min) (point-max)))

   #+end_src

Bind this function to =C-M-==.
#+BEGIN_SRC emacs-lisp :noweb-ref key-bindings
     (global-set-key [?\C-\M-=] #'indent-buffer)
#+END_SRC

* Spell check
Misspelled words are corrected with =M-$= or =C-.= or =C-;= keys.
A word can be completed with =M-TAB=.

Turn on spell checking in all modes.

#+BEGIN_SRC emacs-lisp :noweb-ref hooks
(add-hook 'find-file-hooks 'turn-on-flyspell)
#+END_SRC

=fly-spell= needs =aspell-en= package.

To check spelling in program comments, we need to enable
=flyspell-prog-mode=.

#+BEGIN_SRC emacs-lisp :noweb-ref require
(require 'flyspell)
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb-ref hooks
  (add-hook 'org-mode-hook
            (lambda()
              (flyspell-mode 1)))

  (add-hook 'prog-mode-hook
            (lambda ()
              (flyspell-prog-mode)
                                          ; ...
              ))
#+END_SRC

Key binding.
#+BEGIN_SRC emacs-lisp :noweb-ref key-bindings
(define-key flyspell-mode-map (kbd "C-;") 'helm-flyspell-correct)
#+END_SRC

* Org mode
** org-mode tweaks for code blocks
We want fontification in org-mode. We also want to edit source blocks
in the current window.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-window-setup 'current-window)
#+end_src

** Define easy template extensions
Customize =org-structure-template-alist=

#+BEGIN_SRC emacs-lisp
  (add-to-list
   'org-structure-template-alist
   '("C" "#+name: \n#+begin_src Closure :noweb yes\n\n#+end_src"))
#+END_SRC

** Activate languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (dot . t)))

#+end_src

** Turn off code evaluation confirmation for dot
#+begin_src emacs-lisp
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (string= lang "dot")))
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Define a function to show tangle output filename.

#+begin_src emacs-lisp
  (defun show-tangle-output-filename
    ()
    (interactive)
    (save-excursion
      (while (and (> (point) (point-min))
                  (not (looking-at "^:tangle: \\(.*$\\)")))
        (forward-line -1))
      (message "%s" (match-string 1))
      (match-string 1)))
  (add-hook
      'org-mode-hook
      '(lambda ()
         (define-key org-mode-map "\C-c\C-v/" 'show-tangle-output-filename)))

#+end_src
** Remove org-mode postamble from html-export

#+begin_src emacs-lisp
(setq org-export-html-postamble nil)
#+end_src

** Custom CSS for html export
Tell org-mode to skip inserting its default CSS and link to article.css

#+BEGIN_SRC emacs-lisp
(setq org-export-html-style-include-scripts nil
       org-export-html-style-include-default nil)
(setq org-export-html-style
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"~/projects/gwave-site/articles/article2.css\" />")
(setq org-image-actual-width nil)
#+END_SRC
** Workaround for tangle performance issue
#+BEGIN_SRC emacs-lisp
(setf org-babel-use-quick-and-dirty-noweb-expansion t)
#+END_SRC

* Helm setup
Use *helm* to manage opening files and such. This configuration is
from helm's documentation. When using helm to complete, the following keys are handy.

| =C-n=    | Move to next entry        |
| =C-p=    | Move to previous entry    |
| =M-v=    | Move to previous page     |
| =C-v=    | Move to next page         |
| =M-<=    | Move to top               |
| =M->=    | Move to bottom            |
| =C-w=    | Yank word at point        |
| =M-n=    | Yank symbol at point      |
| =C-jC-j= | View content of selection |
| /        | Root directory            |
| ~/       | Home directory            |

#+BEGIN_SRC emacs-lisp :noweb-ref package-install
  (package-install-if-needed 'helm)
  (package-install-if-needed 'helm-google)
  (package-install-if-needed 'helm-dash)
  (package-install-if-needed 'helm-flyspell)
  (package-install-if-needed 'w3m)
#+END_SRC

Require helm packages.
#+BEGIN_SRC emacs-lisp :noweb-ref require
(require 'helm)
(require 'helm-config)
#+END_SRC

Configure =helm= options.
#+BEGIN_SRC emacs-lisp :noweb-ref package-setup
(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t                       ;; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t                       ;; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t                       ;; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8                       ;; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(setq helm-M-x-fuzzy-match t)                                       ;; optional fuzzy matching for helm-M-x

(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(helm-mode 1)
#+END_SRC

=helm= key bindings.
#+BEGIN_SRC emacs-lisp :noweb-ref key-bindings
;; Helm
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ;; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)   ;; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action)              ;; list actions using C-z
(global-set-key (kbd "C-x C-f") 'helm-find-files)                   ;; replace find-files
(global-set-key (kbd "C-x b") 'helm-mini)                           ;; replace switch-to-buffer
(global-set-key (kbd "M-x") 'helm-M-x)                              ;; helm replacement for M-x
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
;; Magit
(package-install-if-needed 'magit)
#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
(package-install-if-needed 'yasnippet)
(package-install-if-needed 'yasnippet-bundle)
(package-install-if-needed 'helm-c-yasnippet)
#+END_SRC

Require =yasnippet= package.
#+BEGIN_SRC emacs-lisp :noweb-ref require
(require 'yasnippet)
(require 'helm-c-yasnippet)
#+END_SRC

Turn on =yas-mode= in all modes.
#+BEGIN_SRC emacs-lisp :noweb-ref package-setup
(setq helm-yas-space-match-any-greedy t)
(add-to-list 'load-path "~/.emacs.d/snippets/")
(yas-global-mode 1)
#+END_SRC

Key binding to invoke =helm-yas-snippet=.

#+BEGIN_SRC emacs-lisp :noweb-ref key-bindings
(global-set-key (kbd "C-c y") 'helm-yas-complete)
#+END_SRC

* Packages
Install packages I need.
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
  ;; gist
  (package-install-if-needed 'gist)

  ;; auto-complete
  (package-install-if-needed 'auto-complete)
#+END_SRC

* Modes
  Install modes that are not bundled with emacs.

  #+BEGIN_SRC emacs-lisp :noweb-ref package-install
    ;; Clojure
    (when (not (package-installed-p 'clj-mode))
      (package-install 'clj-mode))
    (when (not (package-installed-p 'cider))
      (package-install 'cider))

    ;; javascript
    (when (not (package-installed-p 'js2-mode))
      (package-install 'js2-mode))

    ;; graphviz
    (when (not (package-installed-p 'graphviz-dot-mode))
      (package-install 'graphviz-dot-mode))

    ;;  Rust
    (package-install-if-needed 'rust-mode)

  #+END_SRC

* Go
These bits setup programming mode for golang
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
  (package-install-if-needed 'go-mode)
  (package-install-if-needed 'go-eldoc)
  (package-install-if-needed 'go-autocomplete)
#+END_SRC

Hooks for Go.

#+BEGIN_SRC emacs-lisp :noweb-ref hooks
  ;; install go-mode and go-eldoc package
  ;; enable eldoc for go
  (add-hook
   'go-mode-hook
   (lambda()
     ;; compile command and keybinding for go
     (setq compile-command "go build -v && go test -v && go vet")
     (define-key (current-local-map) "\C-c\C-c" 'compile)
     ;; enable eldoc
     (go-eldoc-setup)
     ;; run gofmt before saving go source
     (setq gofmt-command "goimports")
     ;; Key binding to jum to defn
     (local-set-key (kbd "M-.") 'godef-jump)))

  ;; setup autocompletion
  (require 'auto-complete-config)
  (require 'go-autocomplete)

#+END_SRC
* Git
Set up magit mode for working with git
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
(package-install-if-needed 'magit)
#+END_SRC

* Blogs
  Setup =elfeed= for reading RSS.

  #+BEGIN_SRC emacs-lisp
    (package-install-if-needed 'elfeed)
(require 'elfeed)
    ;; List of my feed urls
    (setq my-feeds '(
                     "http://engineering.linkedin.com/taxonomy/term/1/feed"
                     "http://code.google.com/feeds/updates.xml"
                     "http://nerds.airbnb.com/feed/"
                     "http://engineeringblog.yelp.com/atom.xml"
                     "http://blog.docker.io/feed/"
                     "http://blog.docker.io/feed/"
                     "http://techblog.netflix.com/rss.xml"
                     "http://feeds.feedburner.com/AmazonWebServicesBlog"
                     "https://developers.facebook.com/blog/"
                     "http://news.ycombinator.com/rss"
                     "http://feeds.feedburner.com/TheDailyPuppy"
                     "http://feeds.wired.com/wired/index"
                     "http://rss.cnn.com/rss/cnn_topstories.rss"
                     "http://www.infoq.com/feed?token=lfDrJhbuQ3dOvzpD0piQU2W3q50LEvS2"
                     " http://engineering.twitter.com/feeds/posts/default?alt=rss"))

    ;; Add them to elfeed when necessary
    (mapcar
     (lambda (url)
       (when (not (cl-member url (elfeed-feed-list) :test 'string=))
         (elfeed-add-feed url)))
     my-feeds)

    ;; hotkey to open blog window
    (global-set-key (kbd "C-x w") 'elfeed)
  #+END_SRC

* Global key bindings

  My global key bindings.

  | Copy region  | [C-c C-k] |
  | Scroll up    | [M-p]     |
  | Scroll down  | [M-n]     |
  | Magit status | [C-c m]   |

  | Mode              | Key          | Description            |
  |-------------------+--------------+------------------------|
  | graphviz-dot-mode | =C-c c=      | Compile graph          |
  |                   | =C-c p=      | Preview                |
  |-------------------+--------------+------------------------|
  | org-mode          | =C-c C-e lo= | Export to pdf and open |
  |-------------------+--------------+------------------------|
  | helm-mode         | =C-n=        | Select next in list    |
  |                   | =C-p=        | Select prev in list    |
  |                   | =M-n=        | Move to next section   |
  |                   | =M-p=        | Move to prev section   |
  |-------------------+--------------+------------------------|
  | (global)          | =C-x w=      | Blog window            |
  |                   | =C-c m=      | Magit status           |
  |                   | =C-M ==      | Indent buffer          |
  |                   | =C-c C-k=    | Kill region            |
  |                   | =M-p=        | Scroll up              |
  |                   | =M-n=        | Scroll down            |
  |                   | =C-C h=      | Helm prefix            |

#+begin_src emacs-lisp :noweb-ref key-bindings
(global-set-key "\C-c\C-k" 'copy-region-as-kill)
(global-set-key "\C-ck" 'copy-region-as-kill)
(global-set-key "\M-n"  (lambda () (interactive) (scroll-up 1)))
(global-set-key "\M-p"  (lambda () (interactive) (scroll-down 1)))
(global-set-key "\C-cm"  'magit-status)

(global-set-key (kbd "C-x C-f") #'helm-find-files)
#+end_src

* Theme
Here is the code to install to =zenburn= theme and load it. Default
cursor and mouse colors are adjusted to my personal liking.
#+BEGIN_SRC emacs-lisp :noweb-ref package-install
(package-install-if-needed 'zenburn-theme)
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb-ref package-setup
;; zenburn theme
(load-theme 'zenburn t)
(set-cursor-color "green")
(set-mouse-color "green")
#+END_SRC

Make copy and paste from emacs and other programs. Under X11, the
following block makes this work. Highlighted text can be inserted with
=Shift-Insert= key.

#+BEGIN_SRC emacs-lisp :noweb-ref package-setup
  (when (eq window-system 'x)
    (setq x-select-enable-clipboard t)
    (setq interprogram-paste-function 'x-cut-buffer-or-selection-value))
#+END_SRC

* Load-path extension
#+BEGIN_SRC emacs-lisp :noweb-ref extend-load-path
(add-to-list 'load-path "~/.emacs.d/lisp")

#+END_SRC

* Snippets
** Tikz flowchart
#+BEGIN_SRC python :exports code :tangle ~/.emacs.d/snippets/latex-mode/flowchart.yasnippet
# -*- mode: snippet -*-
# name: flowchart
# key:
# binding: "keybinding"
# expand-env: ((some-var some-value))
# --
\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{tikz}
\usetikzlibrary{shapes.geometric, arrows}

\tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm,text centered, draw=black, fill=red!30]
\tikzstyle{io} = [trapezium, trapezium left angle=70, trapezium right angle=110, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=blue!30]
\tikzstyle{process} = [rectangle, minimum width=3cm, minimum height=1cm, text centered, text width=3cm, draw=black, fill=orange!30]
\tikzstyle{decision} = [diamond, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=green!30]
\tikzstyle{arrow} = [thick,->,>=stealth]

\begin{document}

\begin{tikzpicture}[node distance=2cm]

\node (start) [startstop] {Start};
\node (in1) [io, below of=start] {Input};
\node (pro1) [process, below of=in1] {Process 1};
\node (dec1) [decision, below of=pro1, yshift=-0.5cm] {Decision 1};
\node (pro2a) [process, below of=dec1, yshift=-0.5cm] {Process 2a text text text text text text text text text text};
\node (pro2b) [process, right of=dec1, xshift=2cm] {Process 2b};
\node (out1) [io, below of=pro2a] {Output};
\node (stop) [startstop, below of=out1] {Stop};

\draw [arrow] (start) -- (in1);
\draw [arrow] (in1) -- (pro1);
\draw [arrow] (pro1) -- (dec1);
\draw [arrow] (dec1) -- node[anchor=east] {yes} (pro2a);
\draw [arrow] (dec1) -- node[anchor=south] {no} (pro2b);
\draw [arrow] (pro2b) |- (pro1);
\draw [arrow] (pro2a) -- (out1);
\draw [arrow] (out1) -- (stop);


\end{tikzpicture}

\end{document}
#+END_SRC

#+RESULTS:
: None

* Tangle .emacs
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs :noweb yes
<<extend-load-path>>
<<common-tweaks>>
<<package-install>>
<<require>>
<<key-bindings>>
<<hooks>>
<<package-setup>>
<<util-fn>>
#+END_SRC
